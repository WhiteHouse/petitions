<?php

/**
 * @file
 * api_users.module
 *
 * Provides user for Services according to Whitehouse API Standards.
 */

/**
 * Implements hook_services_resources().
 */
function api_users_services_resources() {
  $resources = array();
  $default_limit = variable_get("api_users_index_max_limit", 100);

  $resources['users'] = array(
    'index' => array(
      'callback' => '_api_users_resource_index',
      'args' => array(
        array(
          'name' => 'created_before',
          'optional' => TRUE,
          'type' => 'int',
          'description' => t('Filters results to display items created before specified time. Accepts '
                           . 'Unix timestamp. (There\'s a handy unix timestamp converter '
                           . '<a href="@here">here</a>.)', array('@here' => 'http://www.unixtimestamp.com/index.php')),
          'source' => array('param' => 'createdBefore'),
        ),
        array(
          'name' => 'created_after',
          'optional' => TRUE,
          'type' => 'int',
          'description' => t('Filters results to display items created before specified time. Accepts '
                           . 'Unix timestamp. (There\'s a handy unix timestamp converter '
                           . '<a href="@here">here</a>.)', array('@here' => 'http://www.unixtimestamp.com/index.php')),
          'source' => array('param' => 'createdAfter'),
        ),
        array(
          'name' => 'created_at',
          'optional' => TRUE,
          'type' => 'int',
          'description' => t('Filters results to display items created before specified time. Accepts '
                           . 'Unix timestamp. (There\'s a handy unix timestamp converter '
                           . '<a href="@here">here</a>.)', array('@here' => 'http://www.unixtimestamp.com/index.php')),
          'source' => array('param' => 'createdAt'),
        ),
        array(
          'name' => 'limit',
          'optional' => TRUE,
          'type' => 'int',
          'description' => "The maximum number of results that may be returned. E.g., to return results 10-20, an offset of 10 and limit of 10 would be passed. Maximum limit is $default_limit; developers who need historic data on all public petitions should consider using our bulk data download, described above.",
          'default value' => 10,
          'source' => array('param' => 'limit'),
        ),
        array(
          'name' => 'offset',
          'optional' => TRUE,
          'type' => 'int',
          'description' => 'Offset the returned results by this number. E.g., to return results 10-20, an offset of 10 and limit of 10 would be passed.',
          'default value' => 0,
          'source' => array('param' => 'offset'),
        ),
        array(
          'name' => 'mock',
          'optional' => TRUE,
          'type' => 'int',
          'description' => 'When set to 1, this will cause the service to return a mock response.',
          'default value' => 0,
          'source' => array('param' => 'mock'),
        ),
      ),
      'access callback' => 'services_access_menu',
      'documentation callback' => '_api_users_index_doc',
    ),
  );

  return $resources;
}

/**
 * Callback for Services users index method.
 */
function _api_users_resource_index($created_before, $created_after, $created_at, $limit, $offset, $mock) {
  // Return mock response.
  if ($mock) {
    $response = json_decode(_api_users_mock_response());
    return $response;
  }

  // Build user select query.
  $user_select = db_select('users', 'u');

  // Specify conditions.
  if ($created_before) {
    $user_select->condition('created', $created_before, '<');
  }
  elseif ($created_after) {
    $user_select->condition('created', $created_after, '>');
  }
  elseif ($created_at) {
    $user_select->condition('created', $created_at);
  }
  // Ignore user 0.
  $user_select->condition('uid', 0, '<>');

  // Specify fields. Not that we want uid even though we will not display it.
  $user_select->fields('u', array('created', 'uid'));

  // Set common join variables.
  $vars = array(':entity_type' => 'profile2', ':bundle' => 'main');

  // Join city profile field.
  $join = "(fdfc.entity_id = u.uid AND fdfc.entity_type = :entity_type AND fdfc.bundle = :bundle)";
  $user_select->leftJoin('field_data_field_city', 'fdfc', $join, $vars);
  $user_select->fields('fdfc', array('field_city_value'));

  // Join state profile field.
  $join = "(fdfs.entity_id = u.uid AND fdfs.entity_type = :entity_type AND fdfs.bundle = :bundle)";
  $user_select->leftJoin('field_data_field_state', 'fdfs', $join, $vars);
  $user_select->fields('fdfs', array('field_state_value'));

  // Join zip profile field.
  $join = "(fdfz.entity_id = u.uid AND fdfz.entity_type = :entity_type AND fdfz.bundle = :bundle)";
  $user_select->leftJoin('field_data_field_zip', 'fdfz', $join, $vars);
  $user_select->fields('fdfz', array('field_zip_value'));

  try {
    // Calculate result set size before doing real query.
    $size = ($size = variable_get('api_users_count', FALSE)) ? $size : api_users_get_count();
  }
  // Catch any error causing the query to fail. Throw our own, custom error
  // instead.
  catch (Exception $e) {
    $status_code = 500;
    $error_code = 598;
    $developer_message = t("Could not perform resource query.");
    $user_message = t("The resource that you requested is temporarily unavailable.");
    $more_info = t('See issue #!code on github: https://github.com/whitehouse/petitions/issues/!code', array('!code' => $error_code));
    return api_errors_throw_error($status_code, $developer_message, $user_message, $more_info, $error_code);
  }

  // Enforce maximum limit size.
  $resource = 'users';
  $default_limit = variable_get("services_{$resource}_index_page_size", 100);

  if (!user_access('perform unlimited index queries') && $limit > $default_limit) {
    $limit = $default_limit;
  }
  $user_select->range($offset, $limit);
  $user_select->orderBy('u.uid', 'ASC');

  try {
    // This simply wraps the query execution in a try, catch condition.
    $results = services_resource_execute_index_query($user_select);
  }
  // Catch any error causing the query to fail. Throw our own, custom error
  // instead.
  catch (Exception $e) {
    $status_code = 500;
    $error_code = 598;
    $developer_message = t("Could not perform resource query.");
    $user_message = t("The resource that you requested is temporarily unavailable.");
    $more_info = t('See issue #!code on github: https://github.com/whitehouse/petitions/issues/!code', array('!code' => $error_code));
    return api_errors_throw_error($status_code, $developer_message, $user_message, $more_info, $error_code);
  }

  // Performs default user sanitation.
  $users = services_resource_build_index_list($results, 'user', 'uid');

  foreach ($users as $user) {
    $results[] = array(
      'type' => 'user',
      'id' => $user->id,
      'created' => $user->created,
      'location' => array(
      'city' => petitions_data_sanitize_output($user->field_city_value),
      'state' => petitions_data_sanitize_output($user->field_state_value),
      'zip' => petitions_data_sanitize_output($user->field_zip_value),
      ),
    );
  }

  $response_params = array(
    'results' => $results,
    'count' => $size,
    'limit' => $limit,
    'offset' => $offset,
  );

  return api_services_responses_format($response_params);
}

/**
 * Implements services_account_object_alter().
 */
function api_users_services_account_object_alter($account) {
  // Obfuscate UID to create unique identifier.
  $hashed_uid = drupal_hmac_base64($account->uid, $account->uid . drupal_get_private_key() . drupal_get_hash_salt());
  $account->id = $hashed_uid;

  // Remove user data.
  $remove = array(
    'mail',
    'init',
    'uri',
    'uid',
  );

  foreach ($remove as $property) {
    if (isset($account->$property)) {
      unset($account->$property);
    }
  }

}

/**
 * Documentation callback for index operation of index resource.
 */
function _api_users_index_doc() {
  $element = array(
    '#name' => t('Index'),
    '#weight' => 1,
    '#description' => t('Returns a list of users matching passed parameters.'),
    '#request_url' => url('/v1/users.json?limit=100&offset=0', array('absolute' => TRUE)),
    '#response' => _api_users_mock_response(),
  );

  return $element;
}

/**
 * Returns a mock response for the users index method.
 */
function _api_users_mock_response() {
  $response = file_get_contents(drupal_get_path('module', 'api_users') . '/example_responses/api_users_index.response.json');
  return $response;
}

/**
 * Queries the database for total number of users in the database with some
 * specific conditions.
 */
function api_users_get_count() {
  $count = db_query("SELECT count(uid) FROM {users} WHERE login != 0 AND status != 0")->fetchField();
  return $count;
}

/**
 * Retrieves, increments, and stores api_user_count variable.
 */
function _api_users_increment_count() {
  // Retrieve the current api_users_count from the database.
  $current_count = ($current_count = variable_get('api_users_count', FALSE)) ? $current_count : api_users_get_count();

  // Increment the returned counter by 1.
  $new_count = ++$current_count;

  // Store the new count in the variable table.
  variable_set('api_users_count', $new_count);
}

/**
 * Implements hook_user_login().
 */
function api_users_user_login(&$edit, $account) {
  if ($account->access == 0) {
    _api_users_increment_count();
  }
}

/**
 * Implements hook_cron().
 */
function api_users_cron() {
  // Check to see when the last time cron was run.  If it's greater then 24
  // hours, then run count check.
  $last_cron = ($last_cron = variable_get('cron_last', FALSE)) ? $last_cront : time();

  if ((time() - $last_cron) >= 86400) {
    // Retrieve the user count by directly querying the database.
    $count = api_users_get_count();

    // Retrieve the current api_users_count from the database.
    $current_count = ($current_count = variable_get('api_users_count', FALSE)) ? $current_count : api_users_get_count();

    // If the DB $count does not match the current_count, log the error and reset
    // the api_users_count variable.
    if ($count != $current_count) {
      watchdog('api_users', 'The api_users_count variable does not match the
      direct query count against the database. This will be updated', array(),
      WATCHDOG_ERROR);
      variable_set('api_users_count', $count);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function api_users_form_petitions_data_form_alter(&$form, &$form_state) {
  $form['petitions_data_limits']['api_users_index_max_limit'] = array(
    '#title' => t('Users maximum result limit'),
    '#type' => 'textfield',
    '#default_value' => variable_get('api_users_index_max_limit', 100),
    '#element_validate' => array('element_validate_number'),
  );
}
