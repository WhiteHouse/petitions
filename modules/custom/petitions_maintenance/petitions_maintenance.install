<?php
/**
 * @file petitions_maintenance.install
 */

/**
 * Implements hook_update_N().
 *
 * Enable these:
 *  - Petitions User Menu module, creates petitions-user-menu and makes it the secondary menu
 *  - Front Class module, adds a "front" class to the <front> page main menu list item
 *  - Petitions 44 (a subtheme of Zen 5 and Fortyfour)
 *  - Rubik, make admin theme
 *  - Is Not Cached module
 *
 * Disable these:
 *  - Bartik (we're not using it on our site, why leave it enabled?)
 *  - Petitions theme
 *
 * Database updates:
 *  - Set the fortyfour_page_wrapper variable to petition (see fortyfour documentation on how this is used by the theme
 *  - Disable Recent Petitions (wh_petitions_recent_petitions) block
 */
function petitions_maintenance_update_7001() {
  $module_list = array('petitions_usermenu', 'front_class', 'is_not_cached');
  module_enable($module_list);

  theme_enable(array('petitions44'));


  variable_set('admin_theme', 'rubik');
  variable_set('theme_default', 'petitions44');

  theme_disable(array('bartik'));
  theme_disable(array('petitions'));

  // Set pagewrapper.
  // TODO Seems like this is probably broken in fortyfour. This defaults to html, not a class name. Double check.
  variable_set('fortyfour_page_wrapper', 'petition');

  // Disable wh_petitions_recent_petitions block.
  db_update('block')
    ->fields(array('status' => 0))
    ->condition('module', 'wh_petitions')
    ->condition('delta', 'wh_petitions_recent_petitions')
    ->condition('theme', 'petitions44')
    ->execute();
}

/**
 * Implements hook_update_N().
 *
 * Enable petitions_homepage module.
 */
function petitions_maintenance_update_7002() {
  $module_list = array('petitions_homepage');
  module_enable($module_list);
}

/**
 * Implements hook_update_N().
 *
 * Enable conditional_styles module.
 */
function petitions_maintenance_update_7003() {
  $module_list = array('conditional_styles');
  module_enable($module_list);
}

/**
 * Implements hook_update_N().
 *
 * Enable textcaptcha module. Replace recaptcha with textcaptcha.
 */
function petitions_maintenance_update_7004() {
  // Enable new modules.
  $modules = array('textcaptcha');
  module_enable($modules);

  // Update captcha challenges.
  variable_set('captcha_default_challenge', 'textcaptcha/Text Captcha');

  $results = db_select('captcha_points', 'c')
    ->fields('c', array('form_id', 'module', 'captcha_type'))
    ->condition('captcha_type', 'reCAPTCHA', '=')
    ->execute()
    ->fetchAll();

  foreach($results as $result) {
    $form_id = $result->form_id;
    $module = 'textcaptcha';
    $type = 'Text Captcha';

    $text = t('Updating !form_id to use !type', array('!form_id' => $form_id, '!type' => $type));
    drupal_set_message($text);

    db_merge('captcha_points')
      ->key(array('form_id' => $form_id))
      ->fields(array('module' => $module, 'captcha_type' => $type))
      ->execute();
  }

  variable_set('textcaptcha_cache_limit', 100); // This sets the limit to 40 using default cache.
  drupal_set_message('Text Captcha has been configured cache up to 100 challenge questions at a time.');

  // Set textcaptcha apikey.
  $text = t('Text Captcha module has been installed. Wherever reCaptcha was in use, it has now been replaced by Text Captcha. To complete set up: (1) Go to the configuration page here: !admin, (2) Enter your textcaptcha.com API key, (3) Then click "Retrieve new captcha challenges" to fill your local cache with challenge questions.', array('!admin' => l('admin/config/people/captcha/textcaptcha', 'admin/config/people/captcha/textcaptcha')));
  drupal_set_message($text);

  // Clear cache, otherwise if textcaptcha was already enabled, the admin form
  // looks funky.
  cache_clear_all();
}

/**
 * Implements hook_update_N().
 *
 * Clean up variables table from old textcaptcha cache variables.
 */
function petitions_maintenance_update_7005() {
  db_query("DELETE FROM {variable} WHERE name = ':var'", array(':var' => 'textcaptcha_cache_limit'));
}

/**
 * Sets default intro text for services_documentation, update menu link.
 */
function petitions_maintenance_update_7006() {
  $intro_text = '<h1>We the People API</h1>
<p>The We the People API currently provides read-only access to data within <a href="http://petitions.whitehouse.gov/">We the People</a>, the White House petitions system. This API provides access to data on all petitions that passed the 150 signature threshold required to become publicly-available on the site. We\'ve also published a <a href="https://petitions.whitehouse.gov/how-why/api-gallery">gallery of projects leveraging the We the People API</a>, including links to live examples and GitHub repositories.</p>
<p><strong>Bulk Data Download:</strong> For those who don\'t need real time data, we\'ve provided a SQL dump of the same dataset exposed via the API. You can download it here: <a href="https://api.whitehouse.gov/v1/downloads/data.sql.zip">https://api.whitehouse.gov/v1/downloads/data.sql.zip</a> (203.5 MB, last updated 5/1/2013)</p>
<p>Developers and users leveraging the We the People API should keep the stability of the API\'s infrastructure and their own applications in mind. Individual users issuing requests in excess of 10 per second will experience degraded performance and may be blocked entirely. Additionally, there is currently a maximum limit of 1000 results per request. Having problems? <a href="http://www.whitehouse.gov/developers/feedback">Contact us</a>.</p>
<p>To learn more about open data and open source projects at the White House, visit <a href="http://www.whitehouse.gov/developers">WhiteHouse.gov/developers</a> or follow our tech team on Twitter <a href="http://twitter.com/whweb">@WHWeb</a>.</p>';

  variable_set('services_documentation_intro', $intro_text);
  variable_set('petitions_data_petitions_api_url', 'api.whitehouse.gov');

  $num_updated = db_update('menu_links')
    ->fields(array(
       'router_path' => 'developers/1000',
       'link_path' => 'developers/1000',
    ))
    ->condition('mlid', 6791)
    ->execute();
}

/**
 * Sets default method verbs for services_documentation.
 */
function petitions_maintenance_update_7007() {
  variable_set('services_documentation_verbs', 'http');
}

/**
 * Disables the api_users and petitions_stats_users modules and updates
 * Services Documentation settings.
 */
function petitions_maintenance_update_7008() {
  // Delete the stale path alias.
  if ($path = path_load(array('alias' => variable_get('services_documentation_base_path')))) {
    path_delete($path);
  }

  // Update variable.
  $variables = array(
    'services_documentation_toc' => 0,
    'services_documentation_base_path' => 'developers',
    'services_documentation_homepage' => 'developers/1000',
  );
  foreach ($variables as $variable => $value) {
    variable_set($variable, $value);
  }

  // Update path alias.
  $path = array(
    'source' => variable_get('services_documentation_homepage'),
    'alias' => variable_get('services_documentation_base_path'),
  );
  path_save($path);

  $modules = array (
    'api_users',
  );

  module_disable($modules, TRUE);
}

/**
 * Installs new modules: Signatures Queue, API Signatures, API Key Manager, API
 * Validations, AWS SQS, Composer Manager.
 *
 * NOTE: Production websites are strongly encouraged to create a new
 * signatures_processing database as described in INSTALL.md before applying
 * this update.
 */
function petitions_maintenance_update_7009() {
  $modules = array(
    'signatures_queue',
    'api_signatures',
    'api_key_manager',
    'api_validations',
    'aws_sqs',
    'composer_manager',
  );

  module_enable($modules);

  // Set AWS vars.
  variable_set('aws_sqs_claimtimeout', '300');
  variable_set('aws_sqs_region', 'us-east-1');
  variable_set('aws_sqs_waittimeseconds', '20');
  variable_set('queue_default_class', 'AwsSqsQueue');
}

/**
 * Enables api_services_responses module.
 */
function petitions_maintenance_update_7010() {
  $modules = array(
    'api_services_responses',
  );

  module_enable($modules);
}

/**
 * Reverts the API Key Manager Feature.
 */
function petitions_maintenance_update_7011() {
  module_load_include('inc', 'features', 'features.export');
  features_include();
  $module = 'api_key_manager';
  if (($feature = feature_load($module, TRUE)) && module_exists($module)) {
    $components = array();
    // Forcefully revert all components of a feature.
    foreach (array_keys($feature->info['features']) as $component) {
      if (features_hook($component, 'features_revert')) {
        $components[] = $component;
      }
    }
    foreach ($components as $component) {
      features_revert(array($module => array($component)));
    }
  }
}
