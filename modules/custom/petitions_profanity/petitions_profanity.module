<?php
/**
 * @file
 * Module file for petitions_profanity.
 */

/**
 * Implements hook_menu().
 */
function petitions_profanity_menu() {
  $items = array();

  $items['admin/petitions/settings/petitions-profanity'] = array(
    'title' => 'Profanity Filter',
    'description' => 'Configure the Profanity filter.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('petitions_profanity_admin_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_form().
 *
 * Administration form.
 */
function petitions_profanity_admin_form($form, &$form_state) {
  $form['petitions_profanity_profane_terms'] = array(
    '#type' => 'textarea',
    '#title' => t('Profane Terms'),
    '#default_value' => variable_get('petitions_profanity_profane_terms', petitions_profanity_default_profane_terms()),
    '#description' => "Enter profane terms, separated by comma.",
    '#required' => FALSE,
  );
  $form['petitions_profanity_alert_text'] = array(
    '#title' => t("Email profanity alert text"),
    '#description' => t('This will add a flag (e.g. HAS PROFANITY) to the beginning of the subject line when a notification email is sent to site administrator(s) for petitions that have crossed the review threshhold. Note: The profanity flag is only added for "threshold passed" notifications about petitions with profanity. This flag will not be added to other emails sent by the system.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('petitions_profanity_alert_text', '[HAS PROFANITY]'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_mail_alter().
 */
function petitions_profanity_mail_alter(&$message) {
  // petitions_profanity_test_mode must be set to 1 or 0 (or unset).
  if (($message['id'] == 'wh_petitions_review_threshold_passed') || variable_get('petitions_profanity_test_mode', '')) {
    $petition = $message['params']['petition'];
    if (!is_array($petition)) {
      $petition = (array) $petition;
    }
    $petition_title = $petition['title'];
    $petition_body = $petition['body'][$petition['language']][0]['value'];

    $profanity_flag = FALSE;
    if (petitions_profanity_is_profane($petition_title)) {
      $profanity_flag = TRUE;
    }
    if (petitions_profanity_is_profane($petition_body)) {
      $profanity_flag = TRUE;
    }
    if ($profanity_flag) {
      $subject_prefix = check_plain(variable_get('petitions_profanity_alert_text', '[HAS PROFANITY]'));
      $message['subject'] = $subject_prefix . ' ' . $message['subject'];

      $exploded_body = explode('=================', $message['body']['0']);
      $exploded_body['1'] = petitions_profanity_highlight_profanity($exploded_body['1']);
      $message['body']['0'] = implode('=================', $exploded_body);
    }
  }
}

/**
 * Runs the profane filter on the specified string.
 *
 * @param string $string
 *   The string to check for profanity.
 * @param array $terms
 *   An optional array of profane terms to check.
 *
 * @return boolean
 *   TRUE if any filter matches any string, FALSE otherwise.
 */
function petitions_profanity_is_profane($string, $terms = array()) {
  return FALSE;
}

/**
 * Highlights profanity in a string.
 *
 * @param string $string
 *   The string to check for profanity.
 * @param array $terms
 *   An optional array of profane terms to check.
 *
 * @return string
 *   The input string with profane terms highlighted.
 */
function petitions_profanity_highlight_profanity($string, $terms = array()) {
  if (!$terms) {
    $terms = petitions_profanity_profane_terms();
  }
  foreach ($terms as $term) {
    $string = preg_replace('/\b' . preg_quote($term) . '\b/i', '<font color="red">$0</font>', $string);
    $string = preg_replace('/((?<=\w)' . preg_quote($term) . '|' . preg_quote($term) . '(?=\w))/i', '<font color="orange">$0</font>', $string);
  }
  return $string;
}

/**
 * Returns an array of profane terms as defined on the administration page.
 */
function petitions_profanity_profane_terms() {
  $terms = variable_get('petitions_profanity_profane_terms', petitions_profanity_default_profane_terms());
  if (!is_array($terms)) {
    $terms = explode(", ", $terms);
  }
  return $terms;
}

/**
 * List of default pre-determined profanity terms.
 */
function petitions_profanity_default_profane_terms() {
  $profane = array(
    'ass', 'bastard', 'bigot', 'bitch', 'blackie',
    'camel jockey', 'carpet muncher', 'chinaman', 'cock', 'coon',
    'cracker', 'crip', 'cunt', 'dago', 'damn',
    'dick', 'dink', 'douche', 'downy', 'dyke',
    'faggot', 'fascist', 'fat ass', 'fudge packer', 'fuck',
    'gimp', 'gook', 'gringo', 'honkey', 'hooch',
    'hun', 'hymie', 'injun', 'jap', 'kike',
    'kraut', 'limey', 'midget', 'motherfucker', 'mullato',
    'nazi', 'nigger', 'paddy', 'paki', 'pinko',
    'piss', 'polack', 'pussy', 'raghead', 'redskin',
    'retard', 'russki', 'sadist', 'shit', 'schmuck',
    'scumbag', 'shit', 'skank', 'spic', 'towel head',
    'twat', 'wanker', 'wetback', 'whitey', 'white trash',
    'whore', 'wigger', 'wop',
  );
  return implode(", ", $profane);
}
