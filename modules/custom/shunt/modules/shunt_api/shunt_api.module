<?php
/**
 * @file
 * This is the main module file for the Petitions API Shunt.
 */

/**
 * Implements hook_shunt().
 *
 * @todo The shunt module needs a mechanism to delete dynamically generated
 * shunts.
 *
 * @todo dynamically define shunts for enabled resources.
 * This works to generate shunts, but logic is needed to implement them.
 * $endpoints = services_endpoint_load_all();
 * $resources = services_get_resources();
 *   foreach ($resources as $resource_key => $resource) {
 *     foreach ($resource as $operation_key => $operation) {
 *       foreach ($operation as $method_key => $method) {
 *         foreach ($endpoints as $endpoint) {
 *           if ($endpoint->resources[$resource_key][$operation_key][$method_key]['enabled']) {
 *             $shunt_name = 'shunt_api_' . $resource_key . '_' . $method_key . '_shunt_is_enabled';
 *             $shunt_description = 'This is a shunt for the ' . $resource_key . ' ' . $method_key . 'method.';
 *             $shunts[$shunt_name] = $shunt_description;
 *           }
 *         }
 *       }
 *     }
 *   }
 *
 * @todo Wrap the Petitions API shunts in a fieldset.
 */
function shunt_api_shunt() {
  $shunts = array(
    'shunt_api' => 'This is a shunt for the Petitions API.',
  );


  return $shunts;
}

/**
 * Implements hook_services_resources_alter().
 */
function shunt_api_services_resources_alter(&$resources, $endpoint) {
  // Confirm a resource has been requested.
  $menu_item = menu_get_item();

  // Load endpoints in order to check the status of resources.
  $endpoints = services_endpoint_load_all();

  // Define a callback parameter to be passed into the callback.
  if ($menu_item['page_callback'] == 'services_endpoint_callback') {
    // Loop through resources.
    foreach ($resources as $resource_key => $resource) {
      // Loop through operations, such as 'operations' and 'relationships'.
      foreach ($resource as $operation_key => $operation) {
        // Loop through methods, such as 'index' and 'retrieve'.
        foreach ($operation as $method_key => $method) {
          // Loop through defined endpoints.
          foreach ($endpoints as $endpoint) {
            // Only affect enabled resources, as defined by endpoints.
            if ($endpoint->resources[$resource_key][$operation_key][$method_key]['enabled']) {
              // Only affect elements with an existing 'args' key.
              if (!empty($resources[$resource_key][$operation_key][$method_key]['args'])) {
                // Preserve the existing callback as a parameter.
                $resources[$resource_key][$operation_key][$method_key]['args'][] = array(
                  'name' => 'callback',
                  'optional' => TRUE,
                  'type' => 'string',
                  'description' => 'The resource callback function.',
                  'default value' => $resources[$resource_key][$operation_key][$method_key]['callback'],
                );
                // Overwrite the existing callack.
                $resources[$resource_key][$operation_key][$method_key]['callback'] = 'shunt_api_callback';
              }
            }
          }
        }
      }
    }
  }
}

/**
 * The new callback for all Services enabled methods.
 *
 * @todo Implement dynamic shunts for enabled resources.
 *
 * @todo Services treats POSTs differently so this function will need to be
 * updated when the Write API is released.
 */
function shunt_api_callback() {
  // If shunt_api has been tripped, 404.
  if (shunt_is_enabled('shunt_api')){
    drupal_not_found();
    return;
  }

  // If the shunt has not been tripped, return normal Services callback.
  // Retrieve arguments passed by Services to the original Resource callback,
  // which have therefore been passed into this function.
  $args = func_get_args();
  // The last value is the original callback, as defined by
  // shunt_api_services_resources_alter().
  $function = array_pop($args);
  return call_user_func_array($function, $args);
}

/**
 * Implements hook_shunt_enable().
 */
function shunt_api_shunt_enable($name) {
  if ($name == 'shunt_api') {
    $text = t('CAUTION: If you have different memcache servers in front of your API site and your main website, you must trip the shunt on both sites or issue a cache clear for the shunt to actually get tripped.');
    drupal_set_message($text, 'warning');
  }
}
